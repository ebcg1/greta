
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "runMCMCbtadjust"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('runMCMCbtadjust')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("runMCMC_btadjust")
> ### * runMCMC_btadjust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: runMCMC_btadjust
> ### Title: runMCMC_btadjust
> ### Aliases: runMCMC_btadjust
> 
> ### ** Examples
> 
>  #\code{
> # for examples with Nimble or Greta, see the Vignette.
> # condition variable of whether installation is OK with Jags to avoid error durong package check
> condition_jags<-TRUE
> if (nchar(system.file(package='rjags'))==0) {condition_jags<-FALSE}
> if (nchar(system.file(package='runjags'))==0) {condition_jags<-FALSE}
> if (condition_jags)
+ {suppressWarnings(temp<-runjags::testjags(silent=TRUE))
+  if(!(temp$JAGS.available&temp$JAGS.found&temp$JAGS.major==4)) {condition_jags<-FALSE}}
> 
> if (condition_jags) {
+ #generating data
+ set.seed(1)
+ y1000<-rnorm(n=1000,mean=600,sd=30)
+ ModelData <-list(mass = y1000,nobs = length(y1000))
+ 
+ #writing the Jags code as a character chain in R
+ modeltotransfer<-"model {
+ 
+ # Priors
+ population.mean ~ dunif(0,5000)
+ population.sd ~ dunif(0,100)
+ 
+ # Precision = 1/variance: Normal distribution parameterized by precision in Jags
+ population.variance <- population.sd * population.sd
+ precision <- 1 / population.variance
+ 
+ # Likelihood
+ for(i in 1:nobs){
+   mass[i] ~ dnorm(population.mean, precision)
+  }
+  }"
+ 
+ #specifying the initial values
+ ModelInits <- function()
+ {list (population.mean = rnorm(1,600,90), population.sd = runif(1, 1, 30))}
+ params <- c("population.mean", "population.sd", "population.variance")
+ K<-3
+ set.seed(1)
+ Inits<-lapply(1:K,function(x){ModelInits()})
+ 
+ # running runMCMC_btadjust with MCMC_language="Jags":
+ set.seed(1)
+ out.mcmc.Coda<-runMCMC_btadjust(MCMC_language="Jags", code=modeltotransfer,
+ data=ModelData,
+ Nchains=K, params=params, inits=Inits,
+ niter.min=1000, niter.max=300000,
+ nburnin.min=100, nburnin.max=200000,
+ thin.min=1, thin.max=1000,
+ neff.min=1000, conv.max=1.05,
+ control=list(print.diagnostics=TRUE, neff.method="Coda"))
+ 
+ summary(out.mcmc.Coda)
+ }
Compiling model graph
   Resolving undeclared variables
   Allocating nodes
Graph information:
   Observed stochastic nodes: 1000
   Unobserved stochastic nodes: 2
   Total graph size: 1009

Initializing model

Cycle 1...
[1] "###################################################################################"
[1] "###################################################################################"
[1] "Current state of diagnostics:"
                Nchains thin niter.tot Nvalues nu.burn
MCMC parameters       3    1      1000    2700       1
[1] "###################################################################################"
                 max median mean      name_max prop_ab_1p2 prop_ab_1p05
Gelman_Upper_C_I   1      1    1 population.sd           0            0
Gelman_Point_Est   1      1    1 population.sd           0            0
                 prop_ab_1p01
Gelman_Upper_C_I            0
Gelman_Point_Est            0
[1] "###################################################################################"
                  min median mean        name_min prop_bel_1000 prop_bel_5000
Neff             1615   1787 1732 population.mean             0             1
                 prop_bel_10000
Neff                          1
[1] "###################################################################################"

Iterations = 1:900
Thinning interval = 1 
Number of chains = 3 
Sample size per chain = 900 

1. Empirical mean and standard deviation for each variable,
   plus standard error of the mean:

                      Mean      SD Naive SE Time-series SE
population.mean     599.65  0.9868  0.01899        0.02478
population.sd        31.08  0.6971  0.01342        0.01649
population.variance 966.42 43.4011  0.83525        1.02801

2. Quantiles for each variable:

                      2.5%   25%    50%    75%   97.5%
population.mean     597.77 599.0 599.63 600.29  601.55
population.sd        29.74  30.6  31.07  31.56   32.46
population.variance 884.27 936.2 965.16 996.12 1053.78

> #}
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.415 0.03 1.506 0.017 0.022 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
